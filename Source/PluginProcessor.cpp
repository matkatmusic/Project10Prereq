/*
  ==============================================================================

    This file contains the basic framework code for a JUCE plugin processor.

  ==============================================================================
*/

#include "PluginProcessor.h"
#include "PluginEditor.h"

//==============================================================================
Project10PrereqAudioProcessor::Project10PrereqAudioProcessor()
#ifndef JucePlugin_PreferredChannelConfigurations
     : AudioProcessor (BusesProperties()
                     #if ! JucePlugin_IsMidiEffect
                      #if ! JucePlugin_IsSynth
                       .withInput  ("Input",  juce::AudioChannelSet::stereo(), true)
                      #endif
                       .withOutput ("Output", juce::AudioChannelSet::stereo(), true)
                     #endif
                       )
#endif
{
}

Project10PrereqAudioProcessor::~Project10PrereqAudioProcessor()
{
}

//==============================================================================
const juce::String Project10PrereqAudioProcessor::getName() const
{
    return JucePlugin_Name;
}

bool Project10PrereqAudioProcessor::acceptsMidi() const
{
   #if JucePlugin_WantsMidiInput
    return true;
   #else
    return false;
   #endif
}

bool Project10PrereqAudioProcessor::producesMidi() const
{
   #if JucePlugin_ProducesMidiOutput
    return true;
   #else
    return false;
   #endif
}

bool Project10PrereqAudioProcessor::isMidiEffect() const
{
   #if JucePlugin_IsMidiEffect
    return true;
   #else
    return false;
   #endif
}

double Project10PrereqAudioProcessor::getTailLengthSeconds() const
{
    return 0.0;
}

int Project10PrereqAudioProcessor::getNumPrograms()
{
    return 1;   // NB: some hosts don't cope very well if you tell them there are 0 programs,
                // so this should be at least 1, even if you're not really implementing programs.
}

int Project10PrereqAudioProcessor::getCurrentProgram()
{
    return 0;
}

void Project10PrereqAudioProcessor::setCurrentProgram (int index)
{
}

const juce::String Project10PrereqAudioProcessor::getProgramName (int index)
{
    return {};
}

void Project10PrereqAudioProcessor::changeProgramName (int index, const juce::String& newName)
{
}

//==============================================================================
void Project10PrereqAudioProcessor::prepareToPlay (double sampleRate, int samplesPerBlock)
{
    DBG(sampleRate);
    osc.reset();
    // Use this method as the place to do any pre-playback
    // initialisation that you need..
    juce::dsp::ProcessSpec spec;
    spec.sampleRate = sampleRate;
    spec.numChannels = getTotalNumInputChannels();
    spec.maximumBlockSize = samplesPerBlock;

    osc.prepare(spec);

    osc.initialise(
        [](float x) {
            return juce::Decibels::decibelsToGain<float>(std::sin(x),-12); 
    }, 128);
}

void Project10PrereqAudioProcessor::releaseResources()
{
    // When playback stops, you can use this as an opportunity to free up any
    // spare memory, etc.
}

#ifndef JucePlugin_PreferredChannelConfigurations
bool Project10PrereqAudioProcessor::isBusesLayoutSupported (const BusesLayout& layouts) const
{
  #if JucePlugin_IsMidiEffect
    juce::ignoreUnused (layouts);
    return true;
  #else
    // This is the place where you check if the layout is supported.
    // In this template code we only support mono or stereo.
    if (layouts.getMainOutputChannelSet() != juce::AudioChannelSet::mono()
     && layouts.getMainOutputChannelSet() != juce::AudioChannelSet::stereo())
        return false;

    // This checks if the input layout matches the output layout
   #if ! JucePlugin_IsSynth
    if (layouts.getMainOutputChannelSet() != layouts.getMainInputChannelSet())
        return false;
   #endif

    return true;
  #endif
}
#endif

void Project10PrereqAudioProcessor::processBlock (juce::AudioBuffer<float>& buffer, juce::MidiBuffer& midiMessages)
{
    juce::ScopedNoDenormals noDenormals;

    /*
     Your job is to:
        - clear the incoming buffer
        - fill all channels in the buffer with the sinewave generated by the osc instance.
        - your sinewave should have a gain level of -12dbFS.
     use the Oscillator<>::processSample(0) member function to fill your channels
     do not use the ProcessContextReplacing<> approach to complete this test
     */

    buffer.clear();
    osc.setFrequency(440);

    unsigned int channels = buffer.getNumChannels();
    unsigned int samples = buffer.getNumSamples();

    for (unsigned int channel = 0; channel < channels; ++channel) {

         auto* writePointer = buffer.getWritePointer(channel);

         for (unsigned int sample = 0; sample < samples; ++sample)
         {
             writePointer[sample] = osc.processSample(buffer.getSample(channel, sample));
         }
    }
}

//==============================================================================
bool Project10PrereqAudioProcessor::hasEditor() const
{
    return true; // (change this to false if you choose to not supply an editor)
}

juce::AudioProcessorEditor* Project10PrereqAudioProcessor::createEditor()
{
    return new Project10PrereqAudioProcessorEditor (*this);
}

//==============================================================================
void Project10PrereqAudioProcessor::getStateInformation (juce::MemoryBlock& destData)
{
    // You should use this method to store your parameters in the memory block.
    // You could do that either as raw data, or use the XML or ValueTree classes
    // as intermediaries to make it easy to save and load complex data.
}

void Project10PrereqAudioProcessor::setStateInformation (const void* data, int sizeInBytes)
{
    // You should use this method to restore your parameters from this memory block,
    // whose contents will have been created by the getStateInformation() call.
}

//==============================================================================
// This creates new instances of the plugin..
juce::AudioProcessor* JUCE_CALLTYPE createPluginFilter()
{
    return new Project10PrereqAudioProcessor();
}
